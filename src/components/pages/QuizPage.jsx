import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { AnimatePresence, motion } from "framer-motion";
import { toast } from "react-toastify";
import { quizService } from "@/services/api/quizService";
import ApperIcon from "@/components/ApperIcon";
import Card from "@/components/atoms/Card";
import Input from "@/components/atoms/Input";
import Button from "@/components/atoms/Button";
import QuizOption from "@/components/molecules/QuizOption";
import Error from "@/components/ui/Error";
import Loading from "@/components/ui/Loading";

const QuizPage = () => {
  const { quizId } = useParams();
  const navigate = useNavigate();
  
  const [quiz, setQuiz] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [answers, setAnswers] = useState({});
  const [showResult, setShowResult] = useState(false);
  const [score, setScore] = useState(0);
  const [timeLeft, setTimeLeft] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [showNameModal, setShowNameModal] = useState(false);
  const [userName, setUserName] = useState("");

  useEffect(() => {
    if (quizId) {
      loadQuiz()
    } else {
      loadRandomQuiz()
    }
  }, [quizId])

  useEffect(() => {
    if (timeLeft === null || quizCompleted) return

    if (timeLeft <= 0) {
      handleSubmitQuiz()
      return
    }

    const timer = setInterval(() => {
      setTimeLeft(prev => prev - 1)
    }, 1000)

    return () => clearInterval(timer)
  }, [timeLeft, quizCompleted])

  const loadQuiz = async () => {
    try {
      setLoading(true)
      setError(null)

      const [quizData, questionsData] = await Promise.all([
        quizService.getById(parseInt(quizId)),
        quizService.getQuestions(parseInt(quizId))
      ])

      setQuiz(quizData)
      setQuestions(questionsData)
      setTimeLeft(quizData.duration * 60) // Convert minutes to seconds
    } catch (err) {
      setError("Failed to load quiz. Please try again.")
    } finally {
      setLoading(false)
    }
  }

const loadRandomQuiz = async () => {
    try {
      setLoading(true)
      setError(null)

      const questionsData = await quizService.getRandomQuestions(20)
      
      setQuestions(questionsData)
      setQuiz({
        title: `ЁЯХЙя╕П Hindu Culture Quiz ЁЯМ║`,
        description: `тЬи Test your knowledge of Hindu traditions and mythology тЬи`,
        duration: 18,
        questionCount: questionsData.length
      })
      setTimeLeft(18 * 60)
    } catch (err) {
      setError("Failed to load quiz. Please try again.")
    } finally {
      setLoading(false)
    }
  }

  const handleAnswerSelect = (answerIndex) => {
    if (showResult) return
    
    setSelectedAnswer(answerIndex)
    setAnswers(prev => ({
      ...prev,
      [currentQuestion]: answerIndex
    }))
  }

  const handleNextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(prev => prev + 1)
      setSelectedAnswer(answers[currentQuestion + 1] || null)
      setShowResult(false)
    } else {
      handleSubmitQuiz()
    }
  }

  const handlePreviousQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(prev => prev - 1)
      setSelectedAnswer(answers[currentQuestion - 1] || null)
      setShowResult(false)
    }
  }

const handleSubmitQuiz = async () => {
    let calculatedScore = 0;
    questions.forEach((question, index) => {
      if (answers[index] === question.correct_answer) {
        calculatedScore++;
      }
    });

    setScore(calculatedScore);
    setShowNameModal(true);
  };

  const handleNameSubmit = async () => {
    if (!userName.trim()) {
      toast.error("рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ");
      return;
    }

    setShowNameModal(false);
    setQuizCompleted(true);

    // Save score
    try {
      await quizService.saveScore({
        userName: userName.trim(),
        score: score,
        totalQuestions: questions.length,
        category: quiz?.category || "General"
      });
    } catch (err) {
      console.error("Failed to save score:", err);
    }
    toast.success(`ЁЯОЙ Quiz completed! You scored ${score}/${questions.length} тЬи`);
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, "0")}`
  }

  const getCertificateMessage = () => {
    const percentage = (score / questions.length) * 100
    let emoji, title, message

    if (percentage >= 90) {
      emoji = 'ЁЯПЖ'
      title = 'рд╢рд╛рд╕реНрддреНрд░реЛрдВ рдХреЗ рдорд░реНрдордЬреНрдЮ!'
      message = 'рдЖрдкрдХреА рд╢рд╛рд╕реНрддреНрд░реЛрдВ рдореЗрдВ рдЧрд╣рд░реА рд╕рдордЭ рдФрд░ рднрдХреНрддрд┐ рдЕрджреНрднреБрдд рд╣реИред рдЖрдкрдиреЗ рдЕрдзреНрдпрд╛рддреНрдо рдореЗрдВ рд╡рд╣ рдКрдБрдЪрд╛рдИ рдЫреВ рд▓реА рд╣реИ рдЬреЛ рд╕рд╛рдзрдирд╛ рдФрд░ рдЕрдзреНрдпрдпрди рд╕реЗ рд╣реА рд╕рдВрднрд╡ рд╣реИред рдЗрд╕реЗ рджреЛрд╕реНрддреЛрдВ рд╡ рдкрд░рд┐рд╡рд╛рд░ рд╕реЗ рдЬрд░реВрд░ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ!'
    } else if (percentage >= 70) {
      emoji = 'ЁЯМЯ'
      title = 'рд╕рдорд░реНрдкрд┐рдд рд╕рд╛рдзрдХ!'
      message = 'рдЖрдкрдиреЗ рд╢рд╛рд╕реНрддреНрд░реЛрдВ рдХрд╛ рдЕрдЪреНрдЫрд╛ рдЬреНрдЮрд╛рди рдЕрд░реНрдЬрд┐рдд рдХрд┐рдпрд╛ рд╣реИред рдирд┐рд░рдВрддрд░ рдЕрднреНрдпрд╛рд╕ рдФрд░ рдкрдврд╝рд╛рдИ рд╕реЗ рдЖрдк рдФрд░ рднреА рдКрдБрдЪрд╛рдЗрдпрд╛рдБ рдкреНрд░рд╛рдкреНрдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред рдЗрд╕реЗ рдорд┐рддреНрд░реЛрдВ рдореЗрдВ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ рдФрд░ рдЙрдиреНрд╣реЗрдВ рднреА рдкреНрд░реЗрд░рд┐рдд рдХрд░реЗрдВред'
    } else if (percentage >= 50) {
      emoji = 'ЁЯУЪ'
      title = 'рдЕрдзреНрдпрдпрдирд░рдд рднрдХреНрдд!'
      message = 'рдЖрдкрдХреЛ рд╢рд╛рд╕реНрддреНрд░реЛрдВ рдХреА рдЖрдзрд╛рд░рднреВрдд рдЬрд╛рдирдХрд╛рд░реА рд╣реИред рдФрд░ рдЕрдзрд┐рдХ рдкрдврд╝рд╛рдИ рд╡ рдордирди рд╕реЗ рдЖрдк рднреА рдЧрд╣рд░рд╛рдИ рддрдХ рдкрд╣реБрдБрдЪ рд╕рдХрддреЗ рд╣реИрдВред рдЕрдкрдиреЗ рджреЛрд╕реНрддреЛрдВ рдХреЛ рднреА рдкреНрд░реЗрд░рд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЗрд╕реЗ рд╢реЗрдпрд░ рдХрд░реЗрдВред'
    } else {
      emoji = 'ЁЯЩП'
      title = 'рдЖрд░рдВрднрд┐рдХ рд╕рд╛рдзрдХ!'
      message = 'рд╣рд░ рдпрд╛рддреНрд░рд╛ рдХреА рд╢реБрд░реБрдЖрдд рдПрдХ рдЫреЛрдЯреЗ рдХрджрдо рд╕реЗ рд╣реЛрддреА рд╣реИред рд╢рд╛рд╕реНрддреНрд░реЛрдВ рдХреЛ рдкрдврд╝рддреЗ рд░рд╣реЗрдВ, рд╕реАрдЦрддреЗ рд░рд╣реЗрдВ рдФрд░ рдЗрд╕ рдЬреНрдЮрд╛рди рдпрд╛рддреНрд░рд╛ рдореЗрдВ рдЖрдЧреЗ рдмрдврд╝реЗрдВред рдЗрд╕реЗ рдЕрдкрдиреЗ рдкреНрд░рд┐рдпрдЬрдиреЛрдВ рд╕рдВрдЧ рд╢реЗрдпрд░ рдХрд░реЗрдВ рддрд╛рдХрд┐ рд╡реЗ рднреА рдЗрд╕ рдорд╛рд░реНрдЧ рдкрд░ рдЪрд▓реЗрдВред'
    }

    return { emoji, title, message, percentage }
  }


  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-saffron-50 to-gold-50 py-8">
        <div className="max-w-4xl mx-auto px-4">
          <Loading type="quiz" />
        </div>
      </div>
    )
  }
  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-saffron-50 to-gold-50 py-8">
        <div className="max-w-4xl mx-auto px-4">
          <Error message={error} onRetry={quizId ? loadQuiz : loadRandomQuiz} />
        </div>
      </div>
    )
  }

// Name input modal
  if (showNameModal) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-saffron-50 to-gold-50 py-8">
        <div className="max-w-md mx-auto px-4">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.3 }}
          >
            <Card className="card-spiritual p-8 text-center">
              <div className="mb-6">
                <div className="w-16 h-16 bg-gradient-saffron rounded-full flex items-center justify-center mx-auto mb-4">
                  <ApperIcon name="User" className="w-8 h-8 text-white" />
                </div>
                <h2 className="text-2xl font-bold text-gradient mb-2">рдкрд░реАрдХреНрд╖рд╛ рдкреВрд░реНрдг!</h2>
                <p className="text-gray-600">рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ</p>
              </div>

              <div className="space-y-4">
                <Input
                  placeholder="рдЖрдкрдХрд╛ рдирд╛рдо"
                  value={userName}
                  onChange={(e) => setUserName(e.target.value)}
                  className="text-center text-lg"
                  onKeyPress={(e) => e.key === 'Enter' && handleNameSubmit()}
                />
                <Button 
                  onClick={handleNameSubmit}
                  className="w-full"
                  disabled={!userName.trim()}
                >
                  рдкреНрд░рдорд╛рдгрдкрддреНрд░ рджреЗрдЦреЗрдВ
                </Button>
              </div>
            </Card>
          </motion.div>
        </div>
      </div>
    )
  }

  if (quizCompleted) {
    const { emoji, title, message, percentage } = getCertificateMessage()
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-saffron-50 to-gold-50 py-8">
        <div className="max-w-lg mx-auto px-4">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.5 }}
          >
            {/* WhatsApp-style Certificate */}
            <Card className="relative overflow-hidden bg-gradient-to-br from-white via-gold-50 to-saffron-50 border-2 border-gold-300 shadow-2xl">
              {/* Decorative elements */}
              <div className="absolute top-0 left-0 w-32 h-32 opacity-10">
                <div className="w-full h-full bg-gradient-saffron rounded-full transform -translate-x-16 -translate-y-16"></div>
              </div>
              <div className="absolute bottom-0 right-0 w-24 h-24 opacity-10">
                <div className="w-full h-full bg-gradient-gold rounded-full transform translate-x-12 translate-y-12"></div>
              </div>

              <div className="relative p-8 text-center">
                {/* Header */}
                <div className="mb-6">
                  <div className="text-6xl mb-4">{emoji}</div>
                  <h1 className="text-2xl font-bold text-gradient mb-2">рдкреНрд░рдорд╛рдгрдкрддреНрд░</h1>
                  <div className="w-16 h-1 bg-gradient-saffron mx-auto rounded-full"></div>
                </div>

                {/* User name */}
                <div className="mb-6">
                  <p className="text-gray-600 text-sm mb-2">рдпрд╣ рдкреНрд░рдорд╛рдгрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рдХрд┐</p>
                  <h2 className="text-2xl font-bold text-gray-800 mb-2">{userName}</h2>
                  <p className="text-gray-600 text-sm">рдиреЗ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреВрд░реНрдг рдХрд┐рдпрд╛ рд╣реИ</p>
                </div>

                {/* Title */}
                <div className="mb-6">
                  <h3 className="text-xl font-bold text-gradient mb-4">{title}</h3>
                  <div className="bg-white bg-opacity-50 backdrop-blur-sm rounded-lg p-4 border border-gold-200">
                    <div className="flex justify-between items-center mb-3">
                      <div className="text-center flex-1">
                        <div className="text-2xl font-bold text-saffron-600">{score}</div>
                        <div className="text-xs text-gray-600">рд╕рд╣реА рдЙрддреНрддрд░</div>
                      </div>
                      <div className="text-center flex-1">
                        <div className="text-2xl font-bold text-gold-600">{Math.round(percentage)}%</div>
                        <div className="text-xs text-gray-600">рд╕рдЯреАрдХрддрд╛</div>
                      </div>
                      <div className="text-center flex-1">
                        <div className="text-2xl font-bold text-orange-600">{questions.length}</div>
                        <div className="text-xs text-gray-600">рдХреБрд▓ рдкреНрд░рд╢реНрди</div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Message */}
                <div className="mb-8">
                  <p className="text-sm text-gray-700 leading-relaxed px-2">{message}</p>
                </div>

                {/* Footer */}
                <div className="text-center mb-6">
                  <p className="text-xs text-gray-500">Trishul Tales - Hindu Culture Quiz</p>
                  <p className="text-xs text-gray-400">{new Date().toLocaleDateString('hi-IN')}</p>
                </div>

{/* Action buttons */}
                <div className="flex flex-col gap-3">
                  <Button 
                    onClick={async () => {
                      try {
                        // Generate certificate image
                        const canvas = document.createElement('canvas')
                        const ctx = canvas.getContext('2d')
                        
// Mobile-friendly size (optimized for WhatsApp sharing)
                        canvas.width = 600
                        canvas.height = 800
                        
                        // Create gradient background
                        const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height)
                        gradient.addColorStop(0, '#FFF8F3')
                        gradient.addColorStop(0.5, '#FFF0E6')
                        gradient.addColorStop(1, '#FFE0CC')
                        ctx.fillStyle = gradient
                        ctx.fillRect(0, 0, canvas.width, canvas.height)
                        
                        // Add decorative border
                        ctx.strokeStyle = '#FF6B35'
                        ctx.lineWidth = 8
                        ctx.strokeRect(20, 20, canvas.width - 40, canvas.height - 40)
                        
                        // Add inner border
                        ctx.strokeStyle = '#FFD700'
                        ctx.lineWidth = 4
                        ctx.strokeRect(40, 40, canvas.width - 80, canvas.height - 80)
                        
                        // Set text properties
                        ctx.textAlign = 'center'
                        ctx.fillStyle = '#1f2937'
                        
// Title with more emojis
                        ctx.font = 'bold 28px Arial'
                        ctx.fillText('ЁЯПЖ рдкреНрд░рдорд╛рдгрдкрддреНрд░ ЁЯПЖ', canvas.width / 2, 80)
                        ctx.font = '18px Arial'
                        ctx.fillStyle = '#6b7280'
                        ctx.fillText('тЬи Hindu Culture Quiz Certificate тЬи', canvas.width / 2, 110)
                        
// User name section
                        ctx.fillStyle = '#1f2937'
                        ctx.font = '16px Arial'
                        ctx.fillText('рдпрд╣ рдкреНрд░рдорд╛рдгрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рдХрд┐', canvas.width / 2, 150)
                        ctx.font = 'bold 24px Arial'
                        ctx.fillText(userName, canvas.width / 2, 180)
                        ctx.font = '16px Arial'
                        ctx.fillText('рдиреЗ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреВрд░реНрдг рдХрд┐рдпрд╛ рд╣реИ', canvas.width / 2, 205)
                        
// Achievement title with emoji
                        ctx.font = 'bold 22px Arial'
                        ctx.fillStyle = '#FF6B35'
                        ctx.fillText(`${emoji} ${title}`, canvas.width / 2, 240)
                        
                        // Score section
                        ctx.fillStyle = '#1f2937'
                        ctx.font = 'bold 20px Arial'
                        ctx.fillText(`ЁЯОп рд╕реНрдХреЛрд░: ${score}/${questions.length} (${Math.round(percentage)}%) ЁЯОп`, canvas.width / 2, 275)
                        
// Message section (wrapped text)
                        ctx.font = '14px Arial'
                        ctx.fillStyle = '#374151'
                        const lines = wrapText(ctx, message, canvas.width - 60)
                        let yPos = 310
                        lines.forEach(line => {
                          ctx.fillText(line, canvas.width / 2, yPos)
                          yPos += 20
                        })
                        
// Footer with emojis
                        ctx.font = '16px Arial'
                        ctx.fillStyle = '#9ca3af'
                        ctx.fillText('ЁЯХЙя╕П Trishul Tales ЁЯМ║', canvas.width / 2, canvas.height - 70)
                        ctx.fillText('Hindu Culture & Wisdom тЬи', canvas.width / 2, canvas.height - 50)
                        ctx.font = '12px Arial'
                        ctx.fillText(new Date().toLocaleDateString('hi-IN'), canvas.width / 2, canvas.height - 25)
                        
                        // Helper function for text wrapping
                        function wrapText(ctx, text, maxWidth) {
                          const words = text.split(' ')
                          const lines = []
                          let currentLine = words[0]
                          
                          for (let i = 1; i < words.length; i++) {
                            const word = words[i]
                            const width = ctx.measureText(currentLine + ' ' + word).width
                            if (width < maxWidth) {
                              currentLine += ' ' + word
                            } else {
                              lines.push(currentLine)
                              currentLine = word
                            }
                          }
                          lines.push(currentLine)
                          return lines
                        }
                        
                        // Try to share image + text
// Try to share image + text
                        canvas.toBlob(async (blob) => {
const text = `ЁЯПЖ ${title}\n\nЁЯМЯ ${userName} рдЬреА рдиреЗ рд╣рд┐рдВрджреВ рд╕рдВрд╕реНрдХреГрддрд┐ рдкреНрд░рд╢реНрдиреЛрддреНрддрд░реА рдореЗрдВ ${score}/${questions.length} рдЕрдВрдХ (${Math.round(percentage)}%) рдкреНрд░рд╛рдкреНрдд рдХрд┐рдП! ${emoji}\n\nтЬи ${message}\n\nЁЯФЧ рдЖрдк рднреА рдХрд░реЗрдВ: ${window.location.origin}/quiz\n\nЁЯХЙя╕П #TrishulTales #HinduCulture #Quiz ЁЯМ║`
                          
try {
                            // Try Web Share API with image (best for mobile)
                            if (navigator.share && navigator.canShare && typeof File !== 'undefined' && File) {
                              const file = new File([blob], 'certificate.png', { type: 'image/png' })
                              const canShareFiles = await navigator.canShare({ files: [file] })
                              
                              if (canShareFiles) {
                                await navigator.share({
                                  title: 'Hindu Culture Quiz Certificate',
                                  text: text,
                                  files: [file]
                                })
                                toast.success("ЁЯОЙ рдкреНрд░рдорд╛рдгрдкрддреНрд░ рд╢реЗрдпрд░ рд╣реЛ рдЧрдпрд╛!")
                                return
                              }
                            }
                            // Fallback to WhatsApp direct link (mobile-friendly)
                            const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(text)}`
                            const newWindow = window.open(whatsappUrl, '_blank')
                            
                            if (newWindow) {
                              // Also download image for manual sharing
                              const link = document.createElement('a')
                              link.download = `certificate-${Date.now()}.png`
                              link.href = URL.createObjectURL(blob)
                              link.click()
                              toast.success("ЁЯУ▒ WhatsApp рдЦреБрд▓ рдЧрдпрд╛! Image рднреА download рд╣реЛ рдЧрдИ рд╣реИ!")
                            } else {
                              // Final fallback to clipboard
                              await navigator.clipboard.writeText(text)
                              const link = document.createElement('a')
                              link.download = `certificate-${Date.now()}.png`
                              link.href = URL.createObjectURL(blob)
                              link.click()
                              toast.success("ЁЯУЛ Text copy рдФрд░ image download рд╣реЛ рдЧрдИ! WhatsApp рдореЗрдВ paste рдХрд░реЗрдВ")
                            }
                          } catch (error) {
                            console.error('Sharing failed:', error)
                            toast.error("тЭМ рд╢реЗрдпрд░ рдирд╣реАрдВ рд╣реЛ рд╕рдХрд╛ред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ")
}
                        }, 'image/png')
                      } catch (error) {
                        console.error('Certificate generation failed:', error)
                        toast.error("тЭМ рдкреНрд░рдорд╛рдгрдкрддреНрд░ рдмрдирд╛рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИ")
                      }
                    }}
                    className="bg-green-500 hover:bg-green-600 text-white"
                  >
                    <ApperIcon name="Share2" className="w-4 h-4 mr-2" />
                    ЁЯУ▒ WhatsApp рдкрд░ рд╢реЗрдпрд░ рдХрд░реЗрдВ
                  </Button>
                  <div className="flex gap-3">
                    <Button 
                      variant="outline" 
                      onClick={() => window.location.reload()}
                      className="flex-1"
                    >
                      <ApperIcon name="RotateCcw" className="w-4 h-4 mr-2" />
                      рдлрд┐рд░ рд╕реЗ рдХрд░реЗрдВ
                    </Button>
                    <Button 
                      variant="secondary" 
                      onClick={() => navigate("/quiz")}
                      className="flex-1"
                    >
                      <ApperIcon name="List" className="w-4 h-4 mr-2" />
                      рдФрд░ Quiz
                    </Button>
                  </div>
                </div>
              </div>
            </Card>
          </motion.div>
        </div>
      </div>
    )
  }

  const currentQ = questions[currentQuestion]
  const progress = ((currentQuestion + 1) / questions.length) * 100

  return (
    <div className="min-h-screen bg-gradient-to-br from-saffron-50 to-gold-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* Header */}
        <div className="mb-8 text-center">
          <h1 className="text-3xl font-bold text-gradient mb-2">{quiz?.title}</h1>
          <p className="text-gray-600">{quiz?.description}</p>
        </div>

        {/* Progress and Timer */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-4">
            <span className="text-sm font-medium text-gray-600">
              Question {currentQuestion + 1} of {questions.length}
            </span>
            {timeLeft !== null && (
              <div className="flex items-center gap-2 text-sm font-medium">
                <ApperIcon name="Clock" className="w-4 h-4 text-saffron-600" />
                <span className={timeLeft < 300 ? "text-red-600" : "text-gray-600"}>
                  {formatTime(timeLeft)}
                </span>
              </div>
            )}
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <motion.div
              className="bg-gradient-saffron h-2 rounded-full"
              initial={{ width: 0 }}
              animate={{ width: `${progress}%` }}
              transition={{ duration: 0.3 }}
            />
          </div>
        </div>

        {/* Question */}
        <AnimatePresence mode="wait">
          <motion.div
            key={currentQuestion}
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.3 }}
          >
            <Card className="card-spiritual p-8 mb-8">
              <h2 className="text-xl font-semibold text-gray-800 mb-6 leading-relaxed">
                {currentQ?.question}
              </h2>

              <div className="space-y-3">
                {currentQ?.options.map((option, index) => (
                  <QuizOption
                    key={index}
                    option={option}
                    index={index}
                    selected={selectedAnswer === index}
onClick={() => handleAnswerSelect(index)}
                    showResult={showResult}
                    isCorrect={index === currentQ.correct_answer}
                  />
                ))}
              </div>
            </Card>
          </motion.div>
        </AnimatePresence>

        {/* Navigation */}
        <div className="flex justify-between items-center">
          <Button
            variant="outline"
            onClick={handlePreviousQuestion}
            disabled={currentQuestion === 0}
            className="flex items-center gap-2"
          >
            <ApperIcon name="ChevronLeft" className="w-4 h-4" />
            Previous
          </Button>

          <div className="text-sm text-gray-600">
            {Object.keys(answers).length} of {questions.length} answered
          </div>

          {currentQuestion === questions.length - 1 ? (
            <Button
              onClick={handleSubmitQuiz}
              className="flex items-center gap-2"
              disabled={Object.keys(answers).length === 0}
            >
              <ApperIcon name="Check" className="w-4 h-4" />
              Submit Quiz
            </Button>
          ) : (
            <Button
              onClick={handleNextQuestion}
              className="flex items-center gap-2"
            >
              Next
              <ApperIcon name="ChevronRight" className="w-4 h-4" />
            </Button>
          )}
</div>
      </div>
    </div>
  );
};

export default QuizPage;